

std= pd.DataFrame({
    "StudentID": range(1, 11),
    "Name": ["Alice", "Bob", "Charlie", "David", "Eva", "Frank", "Grace", "Helen", "Ian", "Jane"],
    "Age": [20, 21, 19, 22, 20, 23, 21, 20, 22, 19],
    "Department": ["CS", "IT", "CS", "ECE", "IT", "CS", "ECE", "IT", "CS", "ECE"],
    "Math": [85, 78, 92, 65, 88, 74, 90, 82, 95, 70],
    "Science": [80, 85, 70, 60, 92, 75, 88, 78, 85, 72],
    "English": [75, 88, 82, 70, 85, 80, 90, 86, 84, 73]
})

sales_df = pd.DataFrame({
    "OrderID": range(101, 111),
    "Product": ["Laptop", "Mobile", "Tablet", "Laptop", "Headphones", "Mobile", "Laptop", "Tablet", "Mobile", "Headphones"],
    "Category": ["Electronics", "Electronics", "Electronics", "Electronics", "Accessories", "Electronics", "Electronics", "Electronics", "Electronics", "Accessories"],
    "Quantity": [2, 5, 3, 1, 10, 4, 2, 6, 7, 8],
    "Price": [60000, 20000, 15000, 62000, 2000, 21000, 61000, 15500, 20500, 2500],
    "Region": ["North", "South", "East", "West", "North", "South", "East", "West", "North", "South"]
})

Slicing
Print the first 3 and last 3 rows of students_df.
Show only the Name and English scores of students 5â€“9.

 Filtering
Get students who scored more than 85 in English.
Find sales with Price greater than 30000.

 Boolean Indexing
Get students in IT department with Math > 80.
Get sales where Region is "East" and Quantity > 3.

Vector Operations
Add a new column Average = (Math + Science + English)/3.
Add a new column in sales TotalValue = Quantity * Price.

Aggregate Functions

Find the minimum, maximum, and average Math score.
Find the total quantity of products sold.

GroupBy
Find department-wise highest English score.
Find region-wise total revenue.
